/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface UniswapAdapterInterface extends ethers.utils.Interface {
  functions: {
    "allPairsLength()": FunctionFragment;
    "createPair(address,address)": FunctionFragment;
    "factoryAddress()": FunctionFragment;
    "getAmountsIn(uint256,address[])": FunctionFragment;
    "getAmountsOut(uint256,address[])": FunctionFragment;
    "getTokensPair(address,address)": FunctionFragment;
    "provideLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "routerAddress()": FunctionFragment;
    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "factoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "provideLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "routerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "factoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provideLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;

  events: {
    "LiquidityProvided(address,uint256,uint256,uint256)": EventFragment;
    "LiquidityRemoved(address,uint256,uint256,uint256)": EventFragment;
    "PairCreated(address,address,address)": EventFragment;
    "Swapped(address,address[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityProvided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swapped"): EventFragment;
}

export type LiquidityProvidedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    to: string;
    amountOne: BigNumber;
    amountTwo: BigNumber;
    amountLiquidity: BigNumber;
  }
>;

export type LiquidityRemovedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    to: string;
    amountOne: BigNumber;
    amountTwo: BigNumber;
    amountLiquidity: BigNumber;
  }
>;

export type PairCreatedEvent = TypedEvent<
  [string, string, string] & {
    pair: string;
    tokenOne: string;
    tokenTwo: string;
  }
>;

export type SwappedEvent = TypedEvent<
  [string, string[], BigNumber[]] & {
    to: string;
    addressArray: string[];
    amountsArray: BigNumber[];
  }
>;

export class UniswapAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UniswapAdapterInterface;

  functions: {
    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPair(
      tokenOne: string,
      tokenTwo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factoryAddress(overrides?: CallOverrides): Promise<[string]>;

    getAmountsIn(
      amountOut: BigNumberish,
      addressesPath: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAmountsOut(
      amountIn: BigNumberish,
      addressesPath: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTokensPair(
      tokenOne: string,
      tokenTwo: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    provideLiquidity(
      tokenOne: string,
      tokenTwo: string,
      amountOne: BigNumberish,
      amountTwo: BigNumberish,
      amountMinOne: BigNumberish,
      amountMinTwo: BigNumberish,
      to: string,
      timeLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      tokenOne: string,
      tokenTwo: string,
      liquidityAmount: BigNumberish,
      amountMinOne: BigNumberish,
      amountMinTwo: BigNumberish,
      to: string,
      timeLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    routerAddress(overrides?: CallOverrides): Promise<[string]>;

    swapExactTokensForTokens(
      amountOne: BigNumberish,
      amountTwo: BigNumberish,
      addressesPath: string[],
      to: string,
      timeLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      addressesPath: string[],
      to: string,
      timeLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  createPair(
    tokenOne: string,
    tokenTwo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factoryAddress(overrides?: CallOverrides): Promise<string>;

  getAmountsIn(
    amountOut: BigNumberish,
    addressesPath: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAmountsOut(
    amountIn: BigNumberish,
    addressesPath: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTokensPair(
    tokenOne: string,
    tokenTwo: string,
    overrides?: CallOverrides
  ): Promise<string>;

  provideLiquidity(
    tokenOne: string,
    tokenTwo: string,
    amountOne: BigNumberish,
    amountTwo: BigNumberish,
    amountMinOne: BigNumberish,
    amountMinTwo: BigNumberish,
    to: string,
    timeLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    tokenOne: string,
    tokenTwo: string,
    liquidityAmount: BigNumberish,
    amountMinOne: BigNumberish,
    amountMinTwo: BigNumberish,
    to: string,
    timeLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  routerAddress(overrides?: CallOverrides): Promise<string>;

  swapExactTokensForTokens(
    amountOne: BigNumberish,
    amountTwo: BigNumberish,
    addressesPath: string[],
    to: string,
    timeLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactTokens(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    addressesPath: string[],
    to: string,
    timeLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenOne: string,
      tokenTwo: string,
      overrides?: CallOverrides
    ): Promise<string>;

    factoryAddress(overrides?: CallOverrides): Promise<string>;

    getAmountsIn(
      amountOut: BigNumberish,
      addressesPath: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAmountsOut(
      amountIn: BigNumberish,
      addressesPath: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTokensPair(
      tokenOne: string,
      tokenTwo: string,
      overrides?: CallOverrides
    ): Promise<string>;

    provideLiquidity(
      tokenOne: string,
      tokenTwo: string,
      amountOne: BigNumberish,
      amountTwo: BigNumberish,
      amountMinOne: BigNumberish,
      amountMinTwo: BigNumberish,
      to: string,
      timeLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _amountOne: BigNumber;
        _amountTwo: BigNumber;
        _liquidityAmount: BigNumber;
      }
    >;

    removeLiquidity(
      tokenOne: string,
      tokenTwo: string,
      liquidityAmount: BigNumberish,
      amountMinOne: BigNumberish,
      amountMinTwo: BigNumberish,
      to: string,
      timeLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _amountOne: BigNumber; _amountTwo: BigNumber }
    >;

    routerAddress(overrides?: CallOverrides): Promise<string>;

    swapExactTokensForTokens(
      amountOne: BigNumberish,
      amountTwo: BigNumberish,
      addressesPath: string[],
      to: string,
      timeLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      addressesPath: string[],
      to: string,
      timeLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {
    "LiquidityProvided(address,uint256,uint256,uint256)"(
      to?: string | null,
      amountOne?: null,
      amountTwo?: null,
      amountLiquidity?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        to: string;
        amountOne: BigNumber;
        amountTwo: BigNumber;
        amountLiquidity: BigNumber;
      }
    >;

    LiquidityProvided(
      to?: string | null,
      amountOne?: null,
      amountTwo?: null,
      amountLiquidity?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        to: string;
        amountOne: BigNumber;
        amountTwo: BigNumber;
        amountLiquidity: BigNumber;
      }
    >;

    "LiquidityRemoved(address,uint256,uint256,uint256)"(
      to?: string | null,
      amountOne?: null,
      amountTwo?: null,
      amountLiquidity?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        to: string;
        amountOne: BigNumber;
        amountTwo: BigNumber;
        amountLiquidity: BigNumber;
      }
    >;

    LiquidityRemoved(
      to?: string | null,
      amountOne?: null,
      amountTwo?: null,
      amountLiquidity?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        to: string;
        amountOne: BigNumber;
        amountTwo: BigNumber;
        amountLiquidity: BigNumber;
      }
    >;

    "PairCreated(address,address,address)"(
      pair?: string | null,
      tokenOne?: null,
      tokenTwo?: null
    ): TypedEventFilter<
      [string, string, string],
      { pair: string; tokenOne: string; tokenTwo: string }
    >;

    PairCreated(
      pair?: string | null,
      tokenOne?: null,
      tokenTwo?: null
    ): TypedEventFilter<
      [string, string, string],
      { pair: string; tokenOne: string; tokenTwo: string }
    >;

    "Swapped(address,address[],uint256[])"(
      to?: string | null,
      addressArray?: null,
      amountsArray?: null
    ): TypedEventFilter<
      [string, string[], BigNumber[]],
      { to: string; addressArray: string[]; amountsArray: BigNumber[] }
    >;

    Swapped(
      to?: string | null,
      addressArray?: null,
      amountsArray?: null
    ): TypedEventFilter<
      [string, string[], BigNumber[]],
      { to: string; addressArray: string[]; amountsArray: BigNumber[] }
    >;
  };

  estimateGas: {
    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenOne: string,
      tokenTwo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      addressesPath: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(
      amountIn: BigNumberish,
      addressesPath: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensPair(
      tokenOne: string,
      tokenTwo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    provideLiquidity(
      tokenOne: string,
      tokenTwo: string,
      amountOne: BigNumberish,
      amountTwo: BigNumberish,
      amountMinOne: BigNumberish,
      amountMinTwo: BigNumberish,
      to: string,
      timeLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      tokenOne: string,
      tokenTwo: string,
      liquidityAmount: BigNumberish,
      amountMinOne: BigNumberish,
      amountMinTwo: BigNumberish,
      to: string,
      timeLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    routerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    swapExactTokensForTokens(
      amountOne: BigNumberish,
      amountTwo: BigNumberish,
      addressesPath: string[],
      to: string,
      timeLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      addressesPath: string[],
      to: string,
      timeLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPair(
      tokenOne: string,
      tokenTwo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factoryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountsIn(
      amountOut: BigNumberish,
      addressesPath: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      amountIn: BigNumberish,
      addressesPath: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensPair(
      tokenOne: string,
      tokenTwo: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    provideLiquidity(
      tokenOne: string,
      tokenTwo: string,
      amountOne: BigNumberish,
      amountTwo: BigNumberish,
      amountMinOne: BigNumberish,
      amountMinTwo: BigNumberish,
      to: string,
      timeLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      tokenOne: string,
      tokenTwo: string,
      liquidityAmount: BigNumberish,
      amountMinOne: BigNumberish,
      amountMinTwo: BigNumberish,
      to: string,
      timeLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    routerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      amountOne: BigNumberish,
      amountTwo: BigNumberish,
      addressesPath: string[],
      to: string,
      timeLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      addressesPath: string[],
      to: string,
      timeLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
